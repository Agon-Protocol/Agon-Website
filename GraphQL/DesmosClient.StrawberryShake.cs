// <auto-generated/>
#nullable enable

namespace Agon.Website.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLinkResult : global::System.IEquatable<GetDesmosProfileByChainLinkResult>, IGetDesmosProfileByChainLinkResult
    {
        public GetDesmosProfileByChainLinkResult(global::System.Collections.Generic.IReadOnlyList<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link> chain_Link)
        {
            Chain_link = chain_Link;
        }

        /// <summary>
        /// fetch data from the table: "chain_link"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link> Chain_link { get; }

        public virtual global::System.Boolean Equals(GetDesmosProfileByChainLinkResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Chain_link, other.Chain_link));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesmosProfileByChainLinkResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Chain_link_elm in Chain_link)
                {
                    hash ^= 397 * Chain_link_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "chain_link"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLink_Chain_link_chain_link : global::System.IEquatable<GetDesmosProfileByChainLink_Chain_link_chain_link>, IGetDesmosProfileByChainLink_Chain_link_chain_link
    {
        public GetDesmosProfileByChainLink_Chain_link_chain_link(global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link_Profile profile)
        {
            Profile = profile;
        }

        /// <summary>
        /// An object relationship
        /// </summary>
        public global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link_Profile Profile { get; }

        public virtual global::System.Boolean Equals(GetDesmosProfileByChainLink_Chain_link_chain_link? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Profile.Equals(other.Profile));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesmosProfileByChainLink_Chain_link_chain_link)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Profile.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "profile"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLink_Chain_link_Profile_profile : global::System.IEquatable<GetDesmosProfileByChainLink_Chain_link_Profile_profile>, IGetDesmosProfileByChainLink_Chain_link_Profile_profile
    {
        public GetDesmosProfileByChainLink_Chain_link_Profile_profile(global::System.String dtag, global::System.String profile_Pic)
        {
            Dtag = dtag;
            Profile_pic = profile_Pic;
        }

        public global::System.String Dtag { get; }

        public global::System.String Profile_pic { get; }

        public virtual global::System.Boolean Equals(GetDesmosProfileByChainLink_Chain_link_Profile_profile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Dtag.Equals(other.Dtag)) && Profile_pic.Equals(other.Profile_pic);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesmosProfileByChainLink_Chain_link_Profile_profile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Dtag.GetHashCode();
                hash ^= 397 * Profile_pic.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetDesmosProfileByChainLinkResult
    {
        /// <summary>
        /// fetch data from the table: "chain_link"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link> Chain_link { get; }
    }

    /// <summary>
    /// columns and relationships of "chain_link"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetDesmosProfileByChainLink_Chain_link
    {
        /// <summary>
        /// An object relationship
        /// </summary>
        public global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link_Profile Profile { get; }
    }

    /// <summary>
    /// columns and relationships of "chain_link"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetDesmosProfileByChainLink_Chain_link_chain_link : IGetDesmosProfileByChainLink_Chain_link
    {
    }

    /// <summary>
    /// columns and relationships of "profile"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetDesmosProfileByChainLink_Chain_link_Profile
    {
        public global::System.String Dtag { get; }

        public global::System.String Profile_pic { get; }
    }

    /// <summary>
    /// columns and relationships of "profile"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetDesmosProfileByChainLink_Chain_link_Profile_profile : IGetDesmosProfileByChainLink_Chain_link_Profile
    {
    }

    /// <summary>
    /// Represents the operation service of the GetDesmosProfileByChainLink GraphQL operation
    /// <code>
    /// query GetDesmosProfileByChainLink($address: String!) {
    ///   chain_link(where: { external_address: { _eq: $address } }) {
    ///     __typename
    ///     profile {
    ///       __typename
    ///       dtag
    ///       profile_pic
    ///     }
    ///     ... on chain_link {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLinkQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDesmosProfileByChainLinkQueryDocument()
        {
        }

        public static GetDesmosProfileByChainLinkQueryDocument Instance { get; } = new GetDesmosProfileByChainLinkQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6d, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x28, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x20, 0x7b, 0x20, 0x5f, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x74, 0x61, 0x67, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3581f4960b2e03f0a7e7aecc3d531558");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDesmosProfileByChainLink GraphQL operation
    /// <code>
    /// query GetDesmosProfileByChainLink($address: String!) {
    ///   chain_link(where: { external_address: { _eq: $address } }) {
    ///     __typename
    ///     profile {
    ///       __typename
    ///       dtag
    ///       profile_pic
    ///     }
    ///     ... on chain_link {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLinkQuery : global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDesmosProfileByChainLinkResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDesmosProfileByChainLinkQuery(global::StrawberryShake.IOperationExecutor<IGetDesmosProfileByChainLinkResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDesmosProfileByChainLinkResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDesmosProfileByChainLinkResult>> ExecuteAsync(global::System.String address, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(address);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDesmosProfileByChainLinkResult>> Watch(global::System.String address, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(address);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String address)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("address", FormatAddress(address));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDesmosProfileByChainLinkQueryDocument.Instance.Hash.Value, name: "GetDesmosProfileByChainLink", document: GetDesmosProfileByChainLinkQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAddress(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDesmosProfileByChainLink GraphQL operation
    /// <code>
    /// query GetDesmosProfileByChainLink($address: String!) {
    ///   chain_link(where: { external_address: { _eq: $address } }) {
    ///     __typename
    ///     profile {
    ///       __typename
    ///       dtag
    ///       profile_pic
    ///     }
    ///     ... on chain_link {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetDesmosProfileByChainLinkQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDesmosProfileByChainLinkResult>> ExecuteAsync(global::System.String address, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDesmosProfileByChainLinkResult>> Watch(global::System.String address, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the DesmosClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class DesmosClient : global::Agon.Website.GraphQL.IDesmosClient
    {
        private readonly global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery _getDesmosProfileByChainLink;
        public DesmosClient(global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery getDesmosProfileByChainLink)
        {
            _getDesmosProfileByChainLink = getDesmosProfileByChainLink ?? throw new global::System.ArgumentNullException(nameof(getDesmosProfileByChainLink));
        }

        public static global::System.String ClientName => "DesmosClient";
        public global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery GetDesmosProfileByChainLink => _getDesmosProfileByChainLink;
    }

    /// <summary>
    /// Represents the DesmosClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IDesmosClient
    {
        global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery GetDesmosProfileByChainLink { get; }
    }
}

namespace Agon.Website.GraphQL.State
{
    ///<summary>columns and relationships of "chain_link"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class chain_linkEntity
    {
        public chain_linkEntity(global::Agon.Website.GraphQL.State.profileData profile = default !)
        {
            Profile = profile;
        }

        ///<summary>An object relationship</summary>
        public global::Agon.Website.GraphQL.State.profileData Profile { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLinkResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Agon.Website.GraphQL.GetDesmosProfileByChainLinkResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Agon.Website.GraphQL.State.chain_linkEntity, GetDesmosProfileByChainLink_Chain_link_chain_link> _getDesmosProfileByChainLink_Chain_Link_Chain_LinkFromchain_LinkEntityMapper;
        public GetDesmosProfileByChainLinkResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Agon.Website.GraphQL.State.chain_linkEntity, GetDesmosProfileByChainLink_Chain_link_chain_link> getDesmosProfileByChainLink_Chain_Link_Chain_LinkFromchain_LinkEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDesmosProfileByChainLink_Chain_Link_Chain_LinkFromchain_LinkEntityMapper = getDesmosProfileByChainLink_Chain_Link_Chain_LinkFromchain_LinkEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDesmosProfileByChainLink_Chain_Link_Chain_LinkFromchain_LinkEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult);
        public GetDesmosProfileByChainLinkResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDesmosProfileByChainLinkResultInfo info)
            {
                return new GetDesmosProfileByChainLinkResult(MapNonNullableIGetDesmosProfileByChainLink_Chain_linkNonNullableArray(info.Chain_link, snapshot));
            }

            throw new global::System.ArgumentException("GetDesmosProfileByChainLinkResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link> MapNonNullableIGetDesmosProfileByChainLink_Chain_linkNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var chain_Links = new global::System.Collections.Generic.List<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                chain_Links.Add(MapNonNullableIGetDesmosProfileByChainLink_Chain_link(child, snapshot));
            }

            return chain_Links;
        }

        private global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link MapNonNullableIGetDesmosProfileByChainLink_Chain_link(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("chain_link", global::System.StringComparison.Ordinal))
            {
                return _getDesmosProfileByChainLink_Chain_Link_Chain_LinkFromchain_LinkEntityMapper.Map(snapshot.GetEntity<global::Agon.Website.GraphQL.State.chain_linkEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLinkResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDesmosProfileByChainLinkResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> chain_Link, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Chain_link = chain_Link;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "chain_link"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Chain_link { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDesmosProfileByChainLinkResultInfo(Chain_link, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLink_Chain_link_chain_linkFromchain_linkEntityMapper : global::StrawberryShake.IEntityMapper<global::Agon.Website.GraphQL.State.chain_linkEntity, GetDesmosProfileByChainLink_Chain_link_chain_link>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDesmosProfileByChainLink_Chain_link_chain_linkFromchain_linkEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDesmosProfileByChainLink_Chain_link_chain_link Map(global::Agon.Website.GraphQL.State.chain_linkEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDesmosProfileByChainLink_Chain_link_chain_link(MapNonNullableIGetDesmosProfileByChainLink_Chain_link_Profile(entity.Profile, snapshot));
        }

        private global::Agon.Website.GraphQL.IGetDesmosProfileByChainLink_Chain_link_Profile MapNonNullableIGetDesmosProfileByChainLink_Chain_link_Profile(global::Agon.Website.GraphQL.State.profileData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesmosProfileByChainLink_Chain_link_Profile returnValue = default !;
            if (data.__typename.Equals("profile", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesmosProfileByChainLink_Chain_link_Profile_profile(data.Dtag ?? throw new global::System.ArgumentNullException(), data.Profile_pic ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetDesmosProfileByChainLinkBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetDesmosProfileByChainLinkBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDesmosProfileByChainLinkResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDesmosProfileByChainLinkResult Result, GetDesmosProfileByChainLinkResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetDesmosProfileByChainLinkResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDesmosProfileByChainLinkResult, GetDesmosProfileByChainLinkResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> chain_LinkId = default !;
            _entityStore.Update(session =>
            {
                chain_LinkId = UpdateNonNullableIGetDesmosProfileByChainLink_Chain_linkEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "chain_link"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDesmosProfileByChainLinkResultInfo(chain_LinkId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetDesmosProfileByChainLink_Chain_linkEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var chain_Links = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                chain_Links.Add(UpdateNonNullableIGetDesmosProfileByChainLink_Chain_linkEntity(session, child, entityIds));
            }

            return chain_Links;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDesmosProfileByChainLink_Chain_linkEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("chain_link", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Agon.Website.GraphQL.State.chain_linkEntity? entity))
                {
                    session.SetEntity(entityId, new global::Agon.Website.GraphQL.State.chain_linkEntity(DeserializeNonNullableIGetDesmosProfileByChainLink_Chain_link_Profile(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "profile"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Agon.Website.GraphQL.State.chain_linkEntity(DeserializeNonNullableIGetDesmosProfileByChainLink_Chain_link_Profile(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "profile"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::Agon.Website.GraphQL.State.profileData DeserializeNonNullableIGetDesmosProfileByChainLink_Chain_link_Profile(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("profile", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Agon.Website.GraphQL.State.profileData(typename, dtag: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dtag")), profile_Pic: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "profile_pic")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>columns and relationships of "profile"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class profileData
    {
        public profileData(global::System.String __typename, global::System.String? dtag = default !, global::System.String? profile_Pic = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Dtag = dtag;
            Profile_pic = profile_Pic;
        }

        public global::System.String __typename { get; }

        public global::System.String? Dtag { get; }

        public global::System.String? Profile_pic { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class DesmosClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "chain_link" => Parsechain_linkEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "chain_link" => Formatchain_linkEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId Parsechain_linkEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String Formatchain_linkEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class DesmosClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public DesmosClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public static partial class DesmosClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Agon.Website.GraphQL.State.DesmosClientStoreAccessor> AddDesmosClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Agon.Website.GraphQL.State.DesmosClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Agon.Website.GraphQL.GetDesmosProfileByChainLinkQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Agon.Website.GraphQL.DesmosClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Agon.Website.GraphQL.IDesmosClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Agon.Website.GraphQL.State.DesmosClientStoreAccessor>("DesmosClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("DesmosClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Agon.Website.GraphQL.State.chain_linkEntity, global::Agon.Website.GraphQL.GetDesmosProfileByChainLink_Chain_link_chain_link>, global::Agon.Website.GraphQL.State.GetDesmosProfileByChainLink_Chain_link_chain_linkFromchain_linkEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>, global::Agon.Website.GraphQL.State.GetDesmosProfileByChainLinkResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>, global::Agon.Website.GraphQL.State.GetDesmosProfileByChainLinkBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Agon.Website.GraphQL.GetDesmosProfileByChainLinkQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Agon.Website.GraphQL.IGetDesmosProfileByChainLinkQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Agon.Website.GraphQL.GetDesmosProfileByChainLinkQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Agon.Website.GraphQL.State.DesmosClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Agon.Website.GraphQL.DesmosClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Agon.Website.GraphQL.IDesmosClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Agon.Website.GraphQL.DesmosClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
